<launch>
    <!--Path to resulting Excel log file-->
    <arg name="log_filepath" default="~/output.xlsx" />
    
    <!--Device ID for connected Kinect-->
    <arg name="device_id" default="#1" />
    
    <!--Path to CNN model-->
    <arg name="model_path" />
    
    <!--Kinect version used-->
    <arg name="kinect_v1" default="true" />
    <arg if="$(arg kinect_v1)" name="kinect_v2" default="false" />
    <arg unless="$(arg kinect_v1)" name="kinect_v2" default="true" />
    
    <!--Prediction percentage-->
    <arg name="predict_percent" default="0.4" />
    <param name="predict_percent" type="double" value="$(arg predict_percent)" />
    
    <!--Square size-->
    <arg name="square_size" default="350" />
    <param name="square_size" type="int" value="$(arg square_size)" />
    
    <!--Debugging (launch each node in its own terminal)-->
    <arg name="debug" default="false" />
    
    <!--Run rviz visualization-->
    <arg name="rviz" default="false" />
    
    <!--If using Kinect from Xbox 360-->
    <group if="$(arg kinect_v1)" >
        <!--Start the freenect_camera driver-->
        <include file="$(find freenect_launch)/launch/freenect.launch" >
            <arg name="depth_registration" value="true" />
            <arg name="device_id" value="$(arg device_id)" />
        </include>
    </group>
    
    <!--If using Kinect from Xbox One-->
    <group if="$(arg kinect_v2)" >
        <!--Start the kinect2_bridge-->
        <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
            <arg name="base_name" value="camera" />
            <arg name="depth_method" value="cpu" />
            <arg name="reg_method" value="cpu" />
        </include>
    </group>
    
    <!--Start CNN node for object recognition-->
    <group if="$(arg debug)" >
        <node pkg="desktop_object_detection" type="CNN.py" name="CNN" args="$(arg model_path)" output="screen" launch-prefix="xterm -e" />
    </group>
    <group unless="$(arg debug)" >
        <node pkg="desktop_object_detection" type="CNN.py" name="CNN" args="$(arg model_path)" />
    </group>
    
    <!--Start synchronization nodelet-->
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
        <!--Remap input topics-->
        <group if="$(arg kinect_v1)" >
            <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
        </group>
        <group if="$(arg kinect_v2)" >
            <remap from="rgb/image" to="/camera/hd/image_color_rect"/>
            <remap from="depth/image" to="/camera/hd/image_depth_rect"/>
            <remap from="rgb/camera_info" to="/camera/hd/camera_info"/>
        </group>
        
        <!--Set approximate synchronization-->
        <param name="approx_sync" value="true"/>
    </node>
    
    <!--Start image segmentation node-->
    <group if="$(arg debug)" >
        <node pkg="desktop_object_detection" type="image_segmentation.py" name="image_segmentation" output="screen" launch-prefix="xterm -e" />
    </group>
    <group unless="$(arg debug)" >
        <node pkg="desktop_object_detection" type="image_segmentation.py" name="image_segmentation" />
    </group>
    
    <!--Start Excel logger node-->
    <node pkg="desktop_object_detection" type="excel_logger.py" name="excel_logger" args="$(arg log_filepath)" />
    
    <!--Start rviz-->
    <group if="$(arg rviz)" >
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find desktop_object_detection)/rviz/default.rviz" />
    </group>
    
    <!--Start CNN node for object recognition-->
    <node pkg="desktop_object_detection" type="CNN.py" name="CNN" args="$(arg model_path)" />
</launch>